name: 📚 Auto-Documentation (Simple)

on:
  push:
    branches: [ main, develop, enhanced-auto-docs-system ]
    paths:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - 'mcp_server.py'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - 'mcp_server.py'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  auto-documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📊 Analyze Project Structure
      id: analyze
      run: |
        echo "📊 Analyzing project structure..."
        
        # Count source files
        SRC_FILES=$(find src -name "*.py" 2>/dev/null | wc -l || echo "0")
        TEST_FILES=$(find tests -name "*.py" 2>/dev/null | wc -l || echo "0")
        TOTAL_LINES=$(find src -name "*.py" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        
        echo "src_files=$SRC_FILES" >> $GITHUB_OUTPUT
        echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT
        echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
        
        echo "📈 Project Stats:"
        echo "  - Source files: $SRC_FILES"
        echo "  - Test files: $TEST_FILES"  
        echo "  - Total lines: $TOTAL_LINES"
    
    - name: 📚 Generate Documentation
      id: generate_docs
      run: |
        echo "🚀 Generating automatic documentation..."
        
        # Make script executable
        chmod +x scripts/simple_doc_generator.py
        
        # Run simple documentation generator
        python scripts/simple_doc_generator.py .
        
        if [ $? -eq 0 ]; then
          echo "docs_generated=true" >> $GITHUB_OUTPUT
          echo "✅ Documentation generated successfully"
        else
          echo "docs_generated=false" >> $GITHUB_OUTPUT
          echo "❌ Documentation generation failed"
          exit 1
        fi
    
    - name: 🔍 Check Documentation Changes
      id: check_changes
      run: |
        echo "🔍 Checking for documentation changes..."
        
        # Check if documentation files were changed
        if git diff --quiet HEAD -- '*.md'; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "📝 No documentation changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "📝 Documentation changes detected:"
          git diff --name-only HEAD -- '*.md' | while read file; do
            echo "  - $file"
          done
        fi
        
        # Show diff summary
        echo "📊 Documentation diff summary:"
        git diff --stat HEAD -- '*.md' || echo "No changes"
    
    - name: 🧪 Validate Documentation Quality
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🧪 Validating documentation quality..."
        
        # Check README structure
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
          
          # Check for required sections
          if grep -q "## " README.md; then
            echo "✅ README has proper sections"
          else
            echo "⚠️ README may be missing sections"
          fi
          
          # Check word count
          WORD_COUNT=$(wc -w < README.md)
          echo "📊 README word count: $WORD_COUNT"
          
          if [ $WORD_COUNT -lt 500 ]; then
            echo "⚠️ README may be too short (< 500 words)"
          else
            echo "✅ README has adequate content"
          fi
        else
          echo "❌ README.md not found"
          exit 1
        fi
        
        # Check CHANGELOG format
        if [ -f "CHANGELOG.md" ]; then
          echo "✅ CHANGELOG.md exists"
          
          if grep -q "## \[" CHANGELOG.md; then
            echo "✅ CHANGELOG follows semantic versioning format"
          else
            echo "⚠️ CHANGELOG may not follow standard format"
          fi
        fi
        
        echo "✅ Documentation validation completed"
    
    - name: 📝 Commit Documentation Changes
      if: steps.check_changes.outputs.has_changes == 'true' && github.event_name == 'push'
      run: |
        echo "📝 Committing documentation changes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Auto-Docs Bot"
        
        # Stage documentation files
        git add *.md
        
        # Create commit message
        COMMIT_MSG="docs: Auto-update documentation

📊 Documentation updated automatically by GitHub Actions

Changes:
$(git diff --cached --name-only | sed 's/^/- /')

📈 Metrics:
- Project lines: ${{ steps.analyze.outputs.total_lines || 'N/A' }}
- Source files: ${{ steps.analyze.outputs.src_files || 'N/A' }}

🤖 Generated with Simple AI Quality Assurance Auto-Documentation System

Co-Authored-By: Auto-Docs Bot <action@github.com>"
        
        # Commit changes
        git commit -m "$COMMIT_MSG" || {
          echo "⚠️ No changes to commit"
          exit 0
        }
        
        # Push changes
        git push origin ${{ github.ref_name }} || {
          echo "❌ Failed to push changes"
          exit 1
        }
        
        echo "✅ Documentation changes committed and pushed"
    
    - name: 🎯 Summary
      if: always()
      run: |
        echo "🎯 Auto-Documentation Workflow Summary"
        echo "======================================"
        echo "📊 Project Analysis: ✅"
        echo "📚 Documentation Generation: ${{ steps.generate_docs.outputs.docs_generated == 'true' && '✅' || '❌' }}"
        echo "🔍 Changes Detection: ${{ steps.check_changes.outputs.has_changes == 'true' && '✅' || '📝 No changes' }}"
        echo "🧪 Quality Validation: ${{ steps.check_changes.outputs.has_changes == 'true' && '✅' || '⏭️ Skipped' }}"
        echo "💾 Commit & Push: ${{ steps.check_changes.outputs.has_changes == 'true' && github.event_name == 'push' && '✅' || '⏭️ Skipped' }}"
        echo "======================================"
        echo ""
        echo "🚀 Simple AI Quality Assurance Auto-Documentation System"
        echo "   Zero dependencies, maximum reliability!"